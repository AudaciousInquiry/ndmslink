import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.lantanagroup.link.config.SftpDownloaderConfig;
import com.lantanagroup.link.config.auth.LinkOAuthConfig;
import com.lantanagroup.link.tasks.ParklandInventoryImportTask;
import com.lantanagroup.link.tasks.config.ParklandInventoryImportConfig;
import com.lantanagroup.link.tasks.config.ParklandSubmissionInfo;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import software.amazon.awssdk.regions.Region;

import java.util.HashMap;

public class ParklandInventoryImport implements RequestHandler<Void,String> {
    private static final Logger logger = LoggerFactory.getLogger(ParklandInventoryImport.class);
    @Override
    public String handleRequest(Void unused, Context context) {
        String returnValue = "";

        try {
            logger.info("Parkland Inventory Import - Started");

            String apiAuthSecretName = System.getenv("API_AUTH_SECRET"); // dev-thsa-link-api-authentication for example...
            String parklandSftpSecretName = System.getenv("PARKLAND_SFTP_SECRET"); // dev-thsa-link-parkland-sftp for example...
            String fileName = System.getenv("DOWNLOAD_FILE_NAME"); // if not specified will be generated by the ParklandInventoryImportTask
            if (fileName == null) { fileName = ""; }
            String filePath = System.getenv("DOWNLOAD_FILE_PATH"); // path on sftp server to find file to download
            String fileType = System.getenv("DOWNLOAD_FILE_TYPE"); // the type of file csv or xlsx
            Region region = Region.of(System.getenv("AWS_REGION")); // us-east-1
            String apiEndpoint = System.getenv("API_ENDPOINT"); // http://localhost:9090/api/data/file
            String icuCodes = System.getenv("ICU_CODES"); // ICU,PCU
            if (icuCodes == null) { icuCodes = ""; }
            logger.info("Lambda Environment Variables Read");

            JSONObject apiAuthSecret = Utility.GetAwsSecretAsJson(region, apiAuthSecretName);
            logger.info("API Authentication AWS Secret Obtained");
            JSONObject parklandSftpSecret = Utility.GetAwsSecretAsJson(region, parklandSftpSecretName);
            logger.info("Parkland SFTP AWS Secret Obtained");

            SftpDownloaderConfig sftpConfig = new SftpDownloaderConfig();
            sftpConfig.setFileName(fileName);
            sftpConfig.setPath(filePath);
            sftpConfig.setHost(parklandSftpSecret.getString("host"));
            sftpConfig.setPort(parklandSftpSecret.getInt("port"));
            sftpConfig.setUsername(parklandSftpSecret.getString("username"));
            sftpConfig.setPassword(parklandSftpSecret.getString("password"));
            sftpConfig.setKnownHostsString(parklandSftpSecret.getString("known-hosts-string"));
            logger.info("SftpDownloaderConfig Created");

            LinkOAuthConfig authConfig = new LinkOAuthConfig();
            authConfig.setTokenUrl(apiAuthSecret.getString("token-url"));
            authConfig.setClientId(apiAuthSecret.getString("client-id"));
            authConfig.setClientSecret(apiAuthSecret.getString("client-secret"));
            authConfig.setUsername(apiAuthSecret.getString("username"));
            authConfig.setPassword(apiAuthSecret.getString("password"));
            authConfig.setScope(apiAuthSecret.getString("scope"));
            authConfig.setCredentialMode(apiAuthSecret.getString("credential-mode"));
            logger.info("LinkOAuthConfig Created");

            ParklandSubmissionInfo submissionInfo = new ParklandSubmissionInfo();
            submissionInfo.setSubmissionUrl(apiEndpoint);
            submissionInfo.setSubmissionAuth(authConfig);
            submissionInfo.setIcuIdentifiers(icuCodes.split(","));
            logger.info("ParklandSubmissionInfo Created");

            ParklandInventoryImportConfig config = new ParklandInventoryImportConfig();
            config.setDownloader(new HashMap<>() {{put(fileType, sftpConfig);}});
            config.setSubmissionInfo(new HashMap<>() {{ put(fileType, submissionInfo); }});
            logger.info("ParklandInventoryImportConfig Created");

            ParklandInventoryImportTask.RunParklandInventoryImportTask(config, fileType, fileName);
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }

        return returnValue;
    }
}
